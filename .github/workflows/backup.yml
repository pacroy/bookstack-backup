name: Backup
concurrency: backup

on:
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      is_dry_run:
        description: 'Dry-run'
        required: true
        default: false
        type: boolean
  schedule:
    - cron: '0 0 * * 0'

permissions:
  contents: read
  id-token: write

env:
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  KUBE_CA_BASE64: ${{ secrets.KUBE_CA_BASE64 }}
  KUBE_API_SERVER: ${{ secrets.KUBE_API_SERVER }}
  KUBE_USER_TOKEN: ${{ secrets.KUBE_USER_TOKEN }}
  KUBE_CONTEXT: ${{ secrets.KUBE_CONTEXT }}
  WIKI_NAMSPACE: ${{ secrets.WIKI_NAMSPACE }}
  MYSQL_APP_LABEL: ${{ secrets.MYSQL_APP_LABEL }}
  BOOKSTACK_APP_LABEL: ${{ secrets.BOOKSTACK_APP_LABEL }}
  BLOB_CONTAINER_NAME: ${{ secrets.BLOB_CONTAINER_NAME }}
  STORAGE_ACCOUNT_NAME: ${{ secrets.STORAGE_ACCOUNT_NAME }}

jobs:
  backup:
    name: Backup
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: 'Checkout self'
        uses: actions/checkout@v4
      - name: 'Check variables'
        shell: bash
        run: |
          check_variable() {
            name="${1}"
            value="$(printf '%s' "${!name}")"
            if [ -z "${value}" ]; then missing_vars+="${name}"$'\n' && passed="false"; fi
          }

          check_variable "AZURE_TENANT_ID"
          check_variable "AZURE_CLIENT_ID"
          check_variable "AZURE_SUBSCRIPTION_ID"

          check_variable "KUBE_CA_BASE64"
          check_variable "KUBE_API_SERVER"
          check_variable "KUBE_USER_TOKEN"
          check_variable "KUBE_CONTEXT"

          check_variable "WIKI_NAMSPACE"
          check_variable "MYSQL_APP_LABEL"
          check_variable "BOOKSTACK_APP_LABEL"

          check_variable "BLOB_CONTAINER_NAME"
          check_variable "STORAGE_ACCOUNT_NAME"

          if [ "$passed" = "false" ]; then
            printf "::error::One or more mandatory secret(s) are not configured.\n$missing_vars"
            exit 90
          else
            echo 'All mandatory secrets are configured.'
          fi
      - name: Print tool version
        shell: bash
        run: |
          echo "[$(command -v az)]"
          az version
          echo
          echo "[$(command -v kubectl)]"
          kubectl version --client=true
      - name: Az CLI login
        uses: azure/login@v1
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
      - name: Login Kubernetes
        shell: bash
        run: |
          echo "${KUBE_CA_BASE64}" | base64 -d > cert.pem
          kubectl config set-cluster "${KUBE_CONTEXT}" --server "${KUBE_API_SERVER}" --embed-certs --certificate-authority=cert.pem
          kubectl config set-credentials "clusterUser_${KUBE_CONTEXT}" --token="${KUBE_USER_TOKEN}"
          kubectl config set-context "${KUBE_CONTEXT}" --user=cluster-admin --cluster="${KUBE_CONTEXT}" --user="clusterUser_${KUBE_CONTEXT}"
          kubectl config use-context "${KUBE_CONTEXT}"
          kubectl version
      - name: Execute backup script
        shell: bash
        run: |
          mkdir backup
          ./backup.sh -y
          {
          cat <<EOF
          ## Backup Files

          \`\`\`
          $(ls -Al backup/)
          \`\`\`
          EOF 
          } >> $GITHUB_STEP_SUMMARY
      - name: Upload to blob storage
        if: github.event_name == 'schedule' || ( github.event_name == 'workflow_dispatch' && !inputs.is_dry_run )
        shell: bash
        run: |
          BLOB_PREFIX=$(date +%Y%m%d)
          echo "Uploading Bookstack database backup file ..."
          az storage blob upload \
            --container-name "$BLOB_CONTAINER_NAME" \
            --file 'backup/bookstack.sql' \
            --name "$BLOB_PREFIX/bookstack.sql" \
            --account-name "$STORAGE_ACCOUNT_NAME" \
            --auth-mode key --only-show-errors
          echo
          echo "Uploading Bookstack upload backup file ..."
          az storage blob upload \
            --container-name "$BLOB_CONTAINER_NAME" \
            --file 'backup/uploads.tgz' \
            --name "$BLOB_PREFIX/uploads.tgz" \
            --account-name "$STORAGE_ACCOUNT_NAME" \
            --auth-mode key --only-show-errors
          echo
          echo "Uploading Bookstack storage backup file ..."
          az storage blob upload \
            --container-name "$BLOB_CONTAINER_NAME" \
            --file 'backup/storage.tgz' \
            --name "$BLOB_PREFIX/storage.tgz" \
            --account-name "$STORAGE_ACCOUNT_NAME" \
            --auth-mode key --only-show-errors
      - name: Cleanup
        if: always()
        shell: bash
        run: |
          echo "Cleaning up ..."
          kubectl config delete-context "${KUBE_CONTEXT}" || true
          kubectl config delete-user "clusterUser_${KUBE_CONTEXT}" || true
          kubectl config delete-cluster "${KUBE_CONTEXT}" || true
          rm -f cert.pem || true
          rm -rf backup || true
          az logout || true
          az account clear || true